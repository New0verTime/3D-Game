        else if(line[0]=='2'){
            int l=line.size();
            int k=0;
            for(int i=2;i<l;++i){
                if(line[i]==' ') {
                    tmp.push_back(k);
                    k=0;
                }
                else{
                    k=k*10+(line[i]-'0');
                }
            }
            std::vector<std::string> t;
            tmp.push_back(k);
            for(int i=6;i<tmp.size();++i){
                t.push_back(std::to_string(tmp[i]));
                TheTextureManager::Instance()->load("assets/"+std::to_string(tmp[i])+".png",std::to_string(tmp[i]),gRenderer);
                }
            std::string name;
            getline(myfile,name);
            getline(myfile,line);
            l=line.size();
            k=0;
            int s_num,a_num;
            for(int i=0;i<l;++i){
                while(line[i]!=' '){
                    k=k*10+line[i]-'0';
                }
                if(line[i]==0){
                    s_num=k;
                    k=0;
                }
            }
            a_num=k;
            k=0;
            std::vector<std::string> sentences;
            for(int i=0;i<s_num;++i){
                getline(myfile,line);
                sentences.push_back(line);
            }
            std::vector<std::string> answer;
            std::vector<std::vector<int>> impact;
            for(int i=0;i<a_num;++i){
                getline(myfile,line);
                answer.push_back(line);
                getline(myfile,line);
                std::vector<int> impact;
                for(int i=0;i<line.size();++i){
                    k=k*10+line[i]-'0';
                }
                    for(int i=0;i<k;++i){
                        getline(myfile,line);
                        int j;
                        for(int i=0;i<line.size();++i){
                            j=j*10+line[i]-'0';
                        }
                        impact.push_back(j);
                    }
                }
            Status abc(sentences,answer,impact);
            //NPC* objj = new NPC(tmp[0],tmp[1],t,tmp[2]/2.0,tmp[3]/2.0,name,abc,tmp[5]/2.0,tmp[4]);
            }
            //NPC* objj =new NPC(tmp[0],tmp[1],t,tmp[2]/2.0,tmp[3]/2.0,tmp[5]/2.0,tmp[4]);
            //obj_map.push_back(objj);
        }